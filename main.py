import logging
from telegram import Update
from telegram.ext import Application, MessageHandler, filters, ContextTypes
from telegram.constants import ParseMode
import os

logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

BOT_TOKEN = os.getenv("BOT_TOKEN", "8281150360:AAEHkDvp9XCWtE9XTNRZfJUE7LA4wILBz2o")
GROUP_CHAT_ID = -1002798600170

class CoachingBot:
    def __init__(self):
        self.help_keywords = {
            "–ø–∏—Ç–∞–Ω–Ω—è": ["—è–∫", "—â–æ", "—á–æ–º—É", "—è–∫—â–æ", "—á–∏", "–¥–µ"],
            "–ø—Ä–æ–±–ª–µ–º–∞": ["–Ω–µ –≤–¥–∞—î—Ç—å—Å—è", "–Ω–µ –º–æ–∂—É", "–∑–∞—Ç—Ä—É–¥–Ω–µ–Ω–Ω—è", "–∑–∞—Å—Ç—Ä—è–≥", "–ø—Ä–æ–±–ª–µ–º–∞"],
            "–∑–∞–ø–∏—Ç": ["–¥–æ–ø–æ–º–æ–∂–∏", "–ø–æ—Ä–∞–¥—å", "–ø—ñ–¥—Å–∫–∞–∂–∏"],
            "–º–µ—Ç–∞": ["—Ö–æ—á—É", "–º–µ—Ç–∞", "–ø–ª–∞–Ω", "–º—Ä—ñ—è"]
        }
    
    def is_coaching_request(self, text):
        text_lower = text.lower()
        if "#–∫–æ—É—á" in text:
            return True
        for keywords in self.help_keywords.values():
            if any(kw in text_lower for kw in keywords):
                return True
        return False
    
    def generate_response(self, text, username):
        text_lower = text.lower()
        
        if any(kw in text_lower for kw in self.help_keywords['–ø–∏—Ç–∞–Ω–Ω—è']):
            return f"{username}, —Ö–æ—Ä–æ—à–µ –ø–∏—Ç–∞–Ω–Ω—è! üéØ\n\n–†–æ–∑–ø–æ–≤—ñ–¥—å –º–µ–Ω—ñ –±—ñ–ª—å—à–µ:\n‚Ä¢ –©–æ —Å–∞–º–µ —Ç–µ–±–µ —Ü—ñ–∫–∞–≤–∏—Ç—å?\n‚Ä¢ –Ø–∫–∞ —Ç–≤–æ—è —Å–∏—Ç—É–∞—Ü—ñ—è?\n‚Ä¢ –©–æ —Ç–∏ —Å–ø—Ä–æ–±—É–≤–∞–≤?\n\n–ó –¥–µ—Ç–∞–ª—è–º–∏ —è –¥–∞–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É –ø–æ—Ä–∞–¥—É. üí°"
        
        if any(kw in text_lower for kw in self.help_keywords['–ø—Ä–æ–±–ª–µ–º–∞']):
            return f"{username}, —Ä–æ–∑—É–º—ñ—é. üí™\n\n–ù–æ —Ü–µ –º–æ–∂–ª–∏–≤—ñ—Å—Ç—å –¥–ª—è —Ä–æ—Å—Ç—É! –î–∞–≤–∞–π —Ä–æ–∑—ñ–±—Ä–∞—Ç–∏—Å—å:\n‚Ä¢ –©–æ –Ω–µ –≤–¥–∞—î—Ç—å—Å—è?\n‚Ä¢ –ö–æ–ª–∏ —Ü–µ –ø–æ—á–∞–ª–æ—Å—å?\n‚Ä¢ –©–æ —Ç–∏ —Å–ø—Ä–æ–±—É–≤–∞–≤?\n\n–ó–Ω–∞–π–¥–µ–º–æ —Ä—ñ—à–µ–Ω–Ω—è. üîç"
        
        if any(kw in text_lower for kw in self.help_keywords['–º–µ—Ç–∞']):
            return f"{username}, —á—É–¥–æ–≤–æ! üéØ\n\n–¢–µ–ø–µ—Ä –ø–ª–∞–Ω:\n‚Ä¢ –Ø–∫–∞ —Ç–æ—á–Ω–æ –º–µ—Ç–∞?\n‚Ä¢ –ö–æ–ª–∏ –¥–æ—Å—è–≥—Ç–∏?\n‚Ä¢ –ü–µ—Ä—à—ñ 3 –∫—Ä–æ–∫–∏?\n\n–î–∞–≤–∞–π! üöÄ"
        
        return f"{username}, —è —Å–ª—É—Ö–∞—é. üëÇ\n\n–†–æ–∑–ø–æ–≤—ñ–¥—å –º–µ–Ω—ñ –±—ñ–ª—å—à–µ –ø—Ä–æ —Ç–≤–æ—é –ø—Ä–æ–±–ª–µ–º—É. ü§î"

coaching_bot = CoachingBot()

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    try:
        if update.message.from_user.is_bot:
            return
        
        text = update.message.text or ""
        username = update.message.from_user.first_name or "–î—Ä—É–∂–µ"
        chat_id = update.message.chat_id
        
        logger.info(f"üì® {username}: {text[:80]}")
        
        if chat_id != GROUP_CHAT_ID:
            return
        
        if coaching_bot.is_coaching_request(text):
            logger.info(f"üéØ –ö–æ—É—á–∏–Ω–≥ –∑–∞–ø–∏—Ç!")
            response = coaching_bot.generate_response(text, username)
            await update.message.reply_text(response, parse_mode=ParseMode.HTML)
            logger.info("‚úÖ –í—ñ–¥–ø–æ–≤—ñ–¥—å –Ω–∞–¥—ñ—Å–ª–∞–Ω–∞!")
        else:
            logger.info("‚è≠Ô∏è  –ù–µ –∫–æ—É—á–∏–Ω–≥")
    
    except Exception as e:
        logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞: {e}")

def main() -> None:
    logger.info("üöÄ –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ (polling)...")
    application = Application.builder().token(BOT_TOKEN).build()
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
    logger.info("‚úÖ –ë–æ—Ç –≥–æ—Ç–æ–≤–∏–π!")
    application.run_polling(allowed_updates=Update.ALL_TYPES, drop_pending_updates=False)

if __name__ == '__main__':
    main()
