import logging
import os
from telegram import Update
from telegram.ext import Application, MessageHandler, filters, ContextTypes
from telegram.constants import ParseMode
from anthropic import Anthropic

logging.basicConfig(format='%(asctime)s - %(name)s - %(levelname)s - %(message)s', level=logging.INFO)
logger = logging.getLogger(__name__)

BOT_TOKEN = os.getenv("BOT_TOKEN", "8281150360:AAEHkDvp9XCWtE9XTNRZfJUE7LA4wILBz2o")
ANTHROPIC_API_KEY = os.getenv("ANTHROPIC_API_KEY")
GROUP_CHAT_ID = -1002798600170

# –ù–∞–ª–∞—à—Ç–æ–≤—É—î–º–æ Claude
if not ANTHROPIC_API_KEY:
    logger.error("‚ùå ANTHROPIC_API_KEY –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∞!")
    raise ValueError("Missing ANTHROPIC_API_KEY")

client = Anthropic()

class CoachingBot:
    def __init__(self):
        self.coaching_system = """–¢–∏ - –µ–∫—Å–ø–µ—Ä—Ç–Ω–∏–π –∫–æ—É—á –∑ —Ç—É—Ä–±–æ—Ç–ª–∏–≤–æ—ó –¥–∏—Å—Ü–∏–ø–ª—ñ–Ω–∏. 

–¢–í–û–á –•–ê–†–ê–ö–¢–ï–†–ò–°–¢–ò–ö–ò:
- –ß—ñ—Ç–∫–∞ —Ç–∞ –ø—Ä—è–º–∞ –∫–æ–º—É–Ω—ñ–∫–∞—Ü—ñ—è (–±–µ–∑ –±–∞–≥–∞—Ç–æ—Å–ª—ñ–≤'—è)
- –§–æ–∫—É—Å –Ω–∞ —Ä—ñ—à–µ–Ω–Ω—è—Ö —Ç–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞—Ö
- –°–ø—Ä–∞–≤–∂–Ω—è —Ç—É—Ä–±–æ—Ç–∞ —Ç–∞ –µ–º–ø–∞—Ç—ñ—è
- –°–ø–æ–Ω—É–∫–∞—î—à –ª—é–¥–∏–Ω—É –¥–æ —Å–∞–º–æ—Å—Ç—ñ–π–Ω–æ–≥–æ —Ä–æ–∑—É–º—ñ–Ω–Ω—è
- –í—Å—Ç–∞–Ω–æ–≤–ª—é—î—à –≤–∏—Å–æ–∫—ñ –æ—á—ñ–∫—É–≤–∞–Ω–Ω—è
- –†–æ–∑–º–æ–≤–ª—è—î—à —è–∫ –ø—Ä–∏—è—Ç–µ–ª—å, –Ω–µ —è–∫ —É—á–∏—Ç–µ–ª—å
- –î–∞—î—à –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ñ, –ø—Ä–∞–∫—Ç–∏—á–Ω—ñ –ø–æ—Ä–∞–¥–∏

–ü–†–ê–í–ò–õ–ê:
1. –í—ñ–¥–ø–æ–≤—ñ–¥–∞–π –ö–û–†–û–¢–ö–û (2-3 —Ä–µ—á–µ–Ω–Ω—è –º–∞–∫—Å–∏–º—É–º)
2. –ó–∞–ø–∏—Ç–∞–π —É—Ç–æ—á–Ω—é—é—á—ñ –ø–∏—Ç–∞–Ω–Ω—è –¥–ª—è –∫—Ä–∞—â–æ–≥–æ —Ä–æ–∑—É–º—ñ–Ω–Ω—è
3. –ë—É–¥—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω–∏–º, –Ω–µ —Ç–µ–æ—Ä–µ—Ç–∏—á–Ω–∏–º
4. –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π –µ–º–æ–¥–∑—ñ —Ä–æ–∑—É–º–Ω–æ (–Ω–µ –±—ñ–ª—å—à–µ 2-3)
5. –§–æ–∫—É—Å—É–π—Å—è –Ω–∞ –¥—ñ—ó, –∞ –Ω–µ –Ω–∞ –ø–æ—á—É—Ç—Ç—è—Ö
6. –î–∞–≤–∞–π –ª—é–¥–∏–Ω—ñ –≤–ª–∞—Å–Ω–µ —Ä—ñ—à–µ–Ω–Ω—è –∑–Ω–∞–π—Ç–∏, –∞–ª–µ —Å–ø—Ä—è–º–æ–≤—É–π —ó—ó

–§–û–†–ú–ê–¢:
–ü–æ—á–∏–Ω–∞–π –∑ —ñ–º–µ–Ω—ñ –ª—é–¥–∏–Ω–∏, –¥–∞–π –∫–æ—Ä–æ—Ç–∫–∏–π –∫–æ–º–µ–Ω—Ç–∞—Ä, –∑–∞–ø–∏—Ç–∞–π —É—Ç–æ—á–Ω—é—é—á–µ –ø–∏—Ç–∞–Ω–Ω—è –∞–±–æ –¥–∞–π –∫–æ–Ω–∫—Ä–µ—Ç–Ω–∏–π —Å–æ–≤—ñ—Ç."""
        
        self.help_keywords = {
            "–ø–∏—Ç–∞–Ω–Ω—è": ["—è–∫", "—â–æ", "—á–æ–º—É", "—è–∫—â–æ", "—á–∏", "–¥–µ"],
            "–ø—Ä–æ–±–ª–µ–º–∞": ["–Ω–µ –≤–¥–∞—î—Ç—å—Å—è", "–Ω–µ –º–æ–∂—É", "–∑–∞—Ç—Ä—É–¥–Ω–µ–Ω–Ω—è", "–∑–∞—Å—Ç—Ä—è–≥"],
            "–∑–∞–ø–∏—Ç": ["–¥–æ–ø–æ–º–æ–∂–∏", "–ø–æ—Ä–∞–¥—å", "–ø—ñ–¥—Å–∫–∞–∂–∏"],
            "–º–µ—Ç–∞": ["—Ö–æ—á—É", "–º–µ—Ç–∞", "–ø–ª–∞–Ω", "–º—Ä—ñ—è"]
        }
    
    def is_coaching_request(self, text):
        text_lower = text.lower()
        if "#–∫–æ—É—á" in text:
            return True
        for keywords in self.help_keywords.values():
            if any(kw in text_lower for kw in keywords):
                return True
        return False
    
    def generate_claude_response(self, text, username):
        """–ì–µ–Ω–µ—Ä—É—î –≤—ñ–¥–ø–æ–≤—ñ–¥—å —á–µ—Ä–µ–∑ Claude API"""
        try:
            message = client.messages.create(
                model="claude-3-5-sonnet-20241022",
                max_tokens=300,
                system=self.coaching_system,
                messages=[
                    {
                        "role": "user",
                        "content": f"{username} –∑–∞–ø–∏—Ç—É—î: \"{text}\"\n\n–î–∞–π –º—É–¥—Ä—É, —Ä–æ–∑–≥–æ—Ä–Ω—É—Ç—É –≤—ñ–¥–ø–æ–≤—ñ–¥—å —è–∫ –∫–æ—É—á."
                    }
                ]
            )
            
            return message.content[0].text
        except Exception as e:
            logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ Claude: {e}")
            return f"{username}, –≤–∏–±–∞—á—Ç–µ, —Ç–µ—Ö–Ω—ñ—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑! ü§ñ"

coaching_bot = CoachingBot()

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    try:
        if update.message.from_user.is_bot:
            return
        
        text = update.message.text or ""
        username = update.message.from_user.first_name or "–î—Ä—É–∂–µ"
        chat_id = update.message.chat_id
        
        logger.info(f"üì® {username}: {text[:80]}")
        
        if chat_id != GROUP_CHAT_ID:
            return
        
        if coaching_bot.is_coaching_request(text):
            logger.info(f"üéØ –ö–æ—É—á–∏–Ω–≥ –∑–∞–ø–∏—Ç! –ì–µ–Ω–µ—Ä—É—é –≤—ñ–¥–ø–æ–≤—ñ–¥—å —á–µ—Ä–µ–∑ Claude...")
            
            # –ì–µ–Ω–µ—Ä—É—î–º–æ –≤—ñ–¥–ø–æ–≤—ñ–¥—å —á–µ—Ä–µ–∑ Claude
            response = coaching_bot.generate_claude_response(text, username)
            
            logger.info(f"üí¨ –í—ñ–¥–ø–æ–≤—ñ–¥—å –≥–æ—Ç–æ–≤–∞, –Ω–∞–¥—Å–∏–ª–∞—é...")
            
            # –ù–∞–¥—Å–∏–ª–∞—î–º–æ –≤—ñ–¥–ø–æ–≤—ñ–¥—å –≤ –≥—Ä—É–ø—É
            await update.message.reply_text(
                response,
                parse_mode=ParseMode.HTML
            )
            logger.info("‚úÖ Claude –≤—ñ–¥–ø–æ–≤—ñ–¥—å –Ω–∞–¥—ñ—Å–ª–∞–Ω–∞!")
        else:
            logger.info("‚è≠Ô∏è  –ù–µ –∫–æ—É—á–∏–Ω–≥ –∑–∞–ø–∏—Ç")
    
    except Exception as e:
        logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞: {e}")

def main() -> None:
    logger.info("üöÄ –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ –∑ Claude AI...")
    application = Application.builder().token(BOT_TOKEN).build()
    
    # –û–±—Ä–æ–±–Ω–∏–∫ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
    
    logger.info("‚úÖ –ë–æ—Ç –≥–æ—Ç–æ–≤–∏–π!")
    application.run_polling(allowed_updates=Update.ALL_TYPES, drop_pending_updates=False)

if __name__ == '__main__':
    main()
