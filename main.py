import logging
from telegram import Update
from telegram.ext import Application, MessageHandler, filters, ContextTypes, CommandHandler
from telegram.constants import ParseMode

logging.basicConfig(format='%(asctime)s - %(name)s - %(levelname)s - %(message)s', level=logging.INFO)
logger = logging.getLogger(__name__)

BOT_TOKEN = "8281150360:AAEHkDvp9XCWtE9XTNRZfJUE7LA4wILBz2o"
GROUP_CHAT_ID = -1002798600170
OWNER_ID = 204234630  # –¢–≤—ñ–π User ID

class CoachingBot:
    def __init__(self):
        self.help_keywords = {
            "–ø–∏—Ç–∞–Ω–Ω—è": ["—è–∫", "—â–æ", "—á–æ–º—É", "—è–∫—â–æ", "—á–∏", "–¥–µ"],
            "–ø—Ä–æ–±–ª–µ–º–∞": ["–Ω–µ –≤–¥–∞—î—Ç—å—Å—è", "–Ω–µ –º–æ–∂—É", "–∑–∞—Ç—Ä—É–¥–Ω–µ–Ω–Ω—è", "–∑–∞—Å—Ç—Ä—è–≥"],
            "–∑–∞–ø–∏—Ç": ["–¥–æ–ø–æ–º–æ–∂–∏", "–ø–æ—Ä–∞–¥—å", "–ø—ñ–¥—Å–∫–∞–∂–∏"],
            "–º–µ—Ç–∞": ["—Ö–æ—á—É", "–º–µ—Ç–∞", "–ø–ª–∞–Ω", "–º—Ä—ñ—è"]
        }
        self.pending_responses = {}  # {message_id: (username, original_text)}
    
    def is_coaching_request(self, text):
        text_lower = text.lower()
        if "#–∫–æ—É—á" in text:
            return True
        for keywords in self.help_keywords.values():
            if any(kw in text_lower for kw in keywords):
                return True
        return False

coaching_bot = CoachingBot()

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    try:
        if update.message.from_user.is_bot:
            return
        
        text = update.message.text or ""
        username = update.message.from_user.first_name or "–î—Ä—É–∂–µ"
        chat_id = update.message.chat_id
        
        logger.info(f"üì® {username}: {text[:80]}")
        
        if chat_id != GROUP_CHAT_ID:
            return
        
        if coaching_bot.is_coaching_request(text):
            logger.info(f"üéØ –ö–æ—É—á–∏–Ω–≥ –∑–∞–ø–∏—Ç! –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è—é...")
            
            # –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è—î–º–æ –∑–∞–ø–∏—Ç —Ç–æ–±—ñ
            forward_text = f"üì® –ù–û–í–ò–ô –ö–û–£–ß–ò–ù–ì –ó–ê–ü–ò–¢\n\nüë§ {username}:\nüí¨ \"{text}\"\n\n–Ø –æ—á—ñ–∫—É—é —Ç–≤–æ—é –≤—ñ–¥–ø–æ–≤—ñ–¥—å!"
            
            msg = await context.bot.send_message(
                chat_id=OWNER_ID,
                text=forward_text,
                parse_mode=ParseMode.HTML
            )
            
            # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –¥–ª—è –ø–æ–¥–∞–ª—å—à–æ—ó –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ
            coaching_bot.pending_responses[msg.message_id] = {
                "group_chat_id": GROUP_CHAT_ID,
                "username": username,
                "original_text": text,
                "original_message_id": update.message.message_id
            }
            
            logger.info(f"‚úÖ –ó–∞–ø–∏—Ç –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–æ!")
        else:
            logger.info("‚è≠Ô∏è  –ù–µ –∫–æ—É—á–∏–Ω–≥")
    
    except Exception as e:
        logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞: {e}")

async def handle_reply(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–æ–±–∫–∞ —Ç–≤–æ—î—ó –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ –Ω–∞ –∫–æ—É—á–∏–Ω–≥ –∑–∞–ø–∏—Ç"""
    try:
        if not update.message.reply_to_message:
            return
        
        original_msg_id = update.message.reply_to_message.message_id
        
        if original_msg_id not in coaching_bot.pending_responses:
            return
        
        coaching_data = coaching_bot.pending_responses[original_msg_id]
        response_text = update.message.text or ""
        
        logger.info(f"üí¨ –ì–µ–Ω–µ—Ä—É—é—î—Ç—å—Å—è –≤—ñ–¥–ø–æ–≤—ñ–¥—å...")
        
        # –ù–∞–¥—Å–∏–ª–∞—î–º–æ —Ç–≤–æ—é –≤—ñ–¥–ø–æ–≤—ñ–¥—å –≤ –≥—Ä—É–ø—É
        final_response = f"{coaching_data['username']}, {response_text}"
        
        await context.bot.send_message(
            chat_id=coaching_data["group_chat_id"],
            text=final_response,
            reply_to_message_id=coaching_data["original_message_id"],
            parse_mode=ParseMode.HTML
        )
        
        # –í–∏–¥–∞–ª—è—î–º–æ –∑ –æ—á—ñ–∫—É–≤–∞–Ω–Ω—è
        del coaching_bot.pending_responses[original_msg_id]
        
        logger.info("‚úÖ –í—ñ–¥–ø–æ–≤—ñ–¥—å –Ω–∞–¥—ñ—Å–ª–∞–Ω–∞ –≤ –≥—Ä—É–ø—É!")
    
    except Exception as e:
        logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤—ñ–¥–ø—Ä–∞–≤—Ü—ñ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ: {e}")

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ö–æ–º–∞–Ω–¥–∞ /start"""
    await update.message.reply_text(
        "ü§ñ –ü—Ä–∏–≤—ñ—Ç! –Ø - –∫–æ—É—á–∏–Ω–≥ –±–æ—Ç.\n\n"
        "–ö–æ–ª–∏ —Ö—Ç–æ—Å—å –∑–∞–ø–∏—Ç–∞—î –≤ –≥—Ä—É–ø—ñ - —è –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—é —Ç–æ–±—ñ.\n"
        "–ü—Ä–æ—Å—Ç–æ –≤—ñ–¥–ø–æ–≤—ñ–¥—å –Ω–∞ –º–æ—î –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è, —ñ —è –Ω–∞–¥—ñ—à–ª—é –≤—ñ–¥–ø–æ–≤—ñ–¥—å –≤ –≥—Ä—É–ø—É! üí™"
    )

def main() -> None:
    logger.info("üöÄ –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ –∑ –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–Ω—è–º...")
    application = Application.builder().token(BOT_TOKEN).build()
    
    # –û–±—Ä–æ–±–Ω–∏–∫–∏
    application.add_handler(CommandHandler("start", start))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND & filters.REPLY, handle_reply))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
    
    logger.info("‚úÖ –ë–æ—Ç –≥–æ—Ç–æ–≤–∏–π!")
    application.run_polling(allowed_updates=Update.ALL_TYPES, drop_pending_updates=False)

if __name__ == '__main__':
    main()
