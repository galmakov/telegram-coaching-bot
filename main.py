import logging
import os
from flask import Flask, request
from telegram import Update, Bot
from telegram.ext import Application
from telegram.constants import ParseMode
import json

# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ª–æ–≥—É–≤–∞–Ω–Ω—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –ö–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—è
BOT_TOKEN = os.getenv("BOT_TOKEN", "8281150360:AAEHkDvp9XCWtE9XTNRZfJUE7LA4wILBz2o")
WEBHOOK_URL = os.getenv("WEBHOOK_URL", "https://worker-production-1934.up.railway.app")
GROUP_CHAT_ID = -1002798600170
PORT = int(os.getenv("PORT", 8000))

app = Flask(__name__)
bot = Bot(token=BOT_TOKEN)

class CoachingBot:
    """–ö–æ—É—á–∏–Ω–≥ –±–æ—Ç –∑ —Ç—É—Ä–±–æ—Ç–ª–∏–≤–æ—ó –¥–∏—Å—Ü–∏–ø–ª—ñ–Ω–∏"""
    
    def __init__(self):
        self.help_keywords = {
            "–ø–∏—Ç–∞–Ω–Ω—è": ["—è–∫", "—â–æ", "—á–æ–º—É", "—è–∫—â–æ", "—á–∏", "–¥–µ", "–∫–æ—Ç—Ä–∞", "—è–∫–∏–π"],
            "–ø—Ä–æ–±–ª–µ–º–∞": ["–Ω–µ –≤–¥–∞—î—Ç—å—Å—è", "–Ω–µ –º–æ–∂—É", "–∑–∞—Ç—Ä—É–¥–Ω–µ–Ω–Ω—è", "–∑–∞—Å—Ç—Ä—è–≥", "–Ω–µ –≤–∏—Ö–æ–¥–∏—Ç—å", "—Å–∫–ª–∞–¥–Ω—ñ—Å—Ç—å", "–ø—Ä–æ–±–ª–µ–º–∞"],
            "–∑–∞–ø–∏—Ç": ["–¥–æ–ø–æ–º–æ–∂–∏", "–ø–æ—Ä–∞–¥—å", "–ø–æ—Å–æ–≤–µ—Ç—É–π", "–ø—ñ–¥—Å–∫–∞–∂–∏", "–∑—Ä–æ–±–∏"],
            "–º–µ—Ç–∞": ["—Ö–æ—á—É", "–º–µ—Ç–∞", "–ø–ª–∞–Ω", "—Ü–µ–ª—å", "–º–µ—á—Ç–∞", "–ø—Ä–∞–≥–Ω—É", "–º—Ä—ñ—è"]
        }
    
    def is_coaching_request(self, text):
        """–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —á–∏ —Ü–µ –∑–∞–ø–∏—Ç –Ω–∞ –∫–æ—É—á–∏–Ω–≥"""
        text_lower = text.lower()
        
        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —Ö–µ—à—Ç–µ–≥
        if "#–∫–æ—É—á" in text:
            return True
        
        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –∫–ª—é—á–æ–≤—ñ —Å–ª–æ–≤–∞
        for keywords in self.help_keywords.values():
            if any(kw in text_lower for kw in keywords):
                return True
        
        return False
    
    def generate_response(self, text, username):
        """–ì–µ–Ω–µ—Ä–∞—Ü—ñ—è –∫–æ—É—á–∏–Ω–≥–æ–≤–æ—ó –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ"""
        text_lower = text.lower()
        
        # –î–ª—è –ø–∏—Ç–∞–Ω—å
        if any(kw in text_lower for kw in self.help_keywords['–ø–∏—Ç–∞–Ω–Ω—è']):
            return f"{username}, —Ö–æ—Ä–æ—à–µ –ø–∏—Ç–∞–Ω–Ω—è! üéØ\n\n–ë–∞–≥–∞—Ç–æ –∑–∞–ª–µ–∂–∏—Ç—å –≤—ñ–¥ –∫–æ–Ω—Ç–µ–∫—Å—Ç—É. –†–æ–∑–ø–æ–≤—ñ–¥—å –º–µ–Ω—ñ –±—ñ–ª—å—à–µ:\n‚Ä¢ –©–æ —Å–∞–º–µ —Ç–µ–±–µ —Ü—ñ–∫–∞–≤–∏—Ç—å?\n‚Ä¢ –Ø–∫–∞ —Ç–≤–æ—è –ø–æ—Ç–æ—á–Ω–∞ —Å–∏—Ç—É–∞—Ü—ñ—è?\n‚Ä¢ –©–æ —Ç–∏ –≤–∂–µ —Å–ø—Ä–æ–±—É–≤–∞–≤?\n\n–ó —Ü–∏–º–∏ –¥–µ—Ç–∞–ª—è–º–∏ —è –∑–º–æ–∂—É –¥–∞—Ç–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É –ø–æ—Ä–∞–¥—É. üí°"
        
        # –î–ª—è –ø—Ä–æ–±–ª–µ–º
        if any(kw in text_lower for kw in self.help_keywords['–ø—Ä–æ–±–ª–µ–º–∞']):
            return f"{username}, —Ä–æ–∑—É–º—ñ—é. üí™\n\n–ù–æ —Ü–µ - –º–æ–∂–ª–∏–≤—ñ—Å—Ç—å –¥–ª—è —Ä–æ—Å—Ç—É! –î–∞–≤–∞–π —Ä–æ–∑—ñ–±—Ä–∞—Ç–∏—Å—å:\n‚Ä¢ –©–æ —Å–∞–º–µ –Ω–µ –≤–¥–∞—î—Ç—å—Å—è?\n‚Ä¢ –ö–æ–ª–∏ —Ü–µ –ø–æ—á–∞–ª–æ—Å—å?\n‚Ä¢ –©–æ —Ç–∏ –≤–∂–µ —Å–ø—Ä–æ–±—É–≤–∞–≤?\n\n–ó —Ü—ñ—î—é —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—î—é –º–∏ –∑–Ω–∞–π–¥–µ–º–æ —Ä—ñ—à–µ–Ω–Ω—è. üîç"
        
        # –î–ª—è —Ü—ñ–ª–µ–π
        if any(kw in text_lower for kw in self.help_keywords['–º–µ—Ç–∞']):
            return f"{username}, —á—É–¥–æ–≤–æ! üéØ\n\n–¶–µ –ø–µ—Ä—à–∏–π –∫—Ä–æ–∫. –¢–µ–ø–µ—Ä –Ω–∞–º –ø–æ—Ç—Ä—ñ–±–µ–Ω –ø–ª–∞–Ω:\n‚Ä¢ –Ø–∫–∞ —Ç–æ—á–Ω–æ —Ç–≤–æ—è –º–µ—Ç–∞?\n‚Ä¢ –ö–æ–ª–∏ —Ç–∏ —Ö–æ—á–µ—à —Ü–µ –¥–æ—Å—è–≥—Ç–∏?\n‚Ä¢ –Ø–∫—ñ –ø–µ—Ä—à—ñ 3 –∫—Ä–æ–∫–∏?\n\n–î–∞–≤–∞–π –≤–∏–∑–Ω–∞—á–∏–º–æ—Å—å! üöÄ"
        
        # –ó–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º
        return f"{username}, —è –±–∞—á—É, —â–æ —É —Ç–µ–±–µ —î –ø–∏—Ç–∞–Ω–Ω—è. üëÇ\n\n–†–æ–∑–ø–æ–≤—ñ–¥—å –º–µ–Ω—ñ –±—ñ–ª—å—à–µ - —è –≥–æ—Ç–æ–≤–∏–π –¥–æ–ø–æ–º–æ–≥—Ç–∏. –Ø–∫–∞ —Å–∞–º–µ —Ç–≤–æ—è –ø—Ä–æ–±–ª–µ–º–∞? ü§î"

# –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î–º–æ –±–æ—Ç–∞
coaching_bot = CoachingBot()

@app.route('/', methods=['GET'])
def health():
    """Health check"""
    return {"status": "ok", "message": "ü§ñ Bot is running!"}, 200

@app.route(f'/webhook', methods=['POST'])
def webhook():
    """Webhook –¥–ª—è Telegram"""
    try:
        data = request.get_json()
        logger.info(f"üì® Webhook –æ—Ç—Ä–∏–º–∞–Ω–æ: {json.dumps(data, ensure_ascii=False)[:200]}")
        
        update = Update.de_json(data, bot)
        
        if not update.message or not update.message.text:
            logger.info("‚ùå –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –±–µ–∑ —Ç–µ–∫—Å—Ç—É, —ñ–≥–Ω–æ—Ä—É—î–º–æ")
            return {"ok": True}, 200
        
        # –Ü–≥–Ω–æ—Ä—É—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤—ñ–¥ —Å–∞–º–æ–≥–æ –±–æ—Ç–∞
        if update.message.from_user.is_bot:
            logger.info("‚ö†Ô∏è  –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤—ñ–¥ –±–æ—Ç–∞, —ñ–≥–Ω–æ—Ä—É—î–º–æ")
            return {"ok": True}, 200
        
        text = update.message.text
        username = update.message.from_user.first_name or "–î—Ä—É–∂–µ"
        chat_id = update.message.chat_id
        message_id = update.message.message_id
        
        logger.info(f"üì® –ù–æ–≤–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤—ñ–¥ {username} (chat_id: {chat_id}): {text[:100]}")
        
        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ —Ü–µ –≥—Ä—É–ø–æ–≤–∞ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
        if chat_id != GROUP_CHAT_ID:
            logger.info(f"‚ùå –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ —ñ–Ω—à–æ–≥–æ —á–∞—Ç—É (ID: {chat_id}), —ñ–≥–Ω–æ—Ä—É—î–º–æ")
            return {"ok": True}, 200
        
        logger.info(f"‚úÖ –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ –≥—Ä—É–ø–∏! –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ...")
        
        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ —Ü–µ –∫–æ—É—á–∏–Ω–≥ –∑–∞–ø–∏—Ç
        if coaching_bot.is_coaching_request(text):
            logger.info(f"üéØ –ö–æ—É—á–∏–Ω–≥ –∑–∞–ø–∏—Ç –≤–∏—è–≤–ª–µ–Ω–æ!")
            
            # –ì–µ–Ω–µ—Ä—É—î–º–æ –∫–æ—É—á–∏–Ω–≥–æ–≤—É –≤—ñ–¥–ø–æ–≤—ñ–¥—å
            response = coaching_bot.generate_response(text, username)
            
            logger.info(f"üí¨ –ì–µ–Ω–µ—Ä—É—î–º–æ –≤—ñ–¥–ø–æ–≤—ñ–¥—å...")
            
            # –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –≤—ñ–¥–ø–æ–≤—ñ–¥—å
            bot.send_message(
                chat_id=chat_id,
                text=response,
                reply_to_message_id=message_id,
                parse_mode=ParseMode.HTML
            )
            logger.info("‚úÖ –í—ñ–¥–ø–æ–≤—ñ–¥—å –Ω–∞–¥—ñ—Å–ª–∞–Ω–∞!")
        else:
            logger.info("‚è≠Ô∏è  –ù–µ –∫–æ—É—á–∏–Ω–≥ –∑–∞–ø–∏—Ç, —ñ–≥–Ω–æ—Ä—É—î–º–æ")
        
        return {"ok": True}, 200
    
    except Exception as e:
        logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –≤ webhook: {e}", exc_info=True)
        return {"ok": False, "error": str(e)}, 500

def setup_webhook():
    """–ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è webhook"""
    try:
        webhook_url = f"{WEBHOOK_URL}/webhook"
        logger.info(f"üîó –í—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ webhook: {webhook_url}")
        
        bot.set_webhook(url=webhook_url)
        logger.info("‚úÖ Webhook –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ!")
    except Exception as e:
        logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ñ webhook: {e}")

if __name__ == '__main__':
    logger.info("üöÄ –ó–∞–ø—É—Å–∫ Flask —Å–µ—Ä–≤–µ—Ä–∞...")
    setup_webhook()
    app.run(host='0.0.0.0', port=PORT, debug=False)
