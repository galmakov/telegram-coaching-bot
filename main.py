import logging
import os
from telegram import Update
from telegram.ext import Application, MessageHandler, filters, ContextTypes
from telegram.constants import ParseMode
from groq import Groq

logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

BOT_TOKEN = os.getenv("BOT_TOKEN", "8281150360:AAEHkDvp9XCWtE9XTNRZfJUE7LA4wILBz2o")
GROQ_API_KEY = os.getenv("GROQ_API_KEY")
GROUP_CHAT_ID = -1002798600170

# –ù–∞–ª–∞—à—Ç–æ–≤—É—î–º–æ Groq
if not GROQ_API_KEY:
    logger.error("‚ùå GROQ_API_KEY –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∞!")
    raise ValueError("Missing GROQ_API_KEY")

client = Groq(api_key=GROQ_API_KEY)

class CoachingBot:
    def __init__(self):
        self.coaching_prompt = """–¢–∏ - –∫–æ—É—á –∑ —Ç—É—Ä–±–æ—Ç–ª–∏–≤–æ—ó –¥–∏—Å—Ü–∏–ø–ª—ñ–Ω–∏. 
–•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏:
- –ß—ñ—Ç–∫–∞ —Ç–∞ –ø—Ä—è–º–∞ –∫–æ–º—É–Ω—ñ–∫–∞—Ü—ñ—è
- –§–æ–∫—É—Å –Ω–∞ —Ä—ñ—à–µ–Ω–Ω—è—Ö —Ç–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞—Ö
- –°–ø—Ä–∞–≤–∂–Ω—è —Ç—É—Ä–±–æ—Ç–∞ —Ç–∞ –µ–º–ø–∞—Ç—ñ—è
- –°–ø–æ–Ω—É–∫–∞—î—à –ª—é–¥–∏–Ω—É –¥–æ —Å–∞–º–æ—Å—Ç—ñ–π–Ω–æ–≥–æ —Ä–æ–∑—É–º—ñ–Ω–Ω—è
- –í—Å—Ç–∞–Ω–æ–≤–ª—é—î—à –≤–∏—Å–æ–∫—ñ –æ—á—ñ–∫—É–≤–∞–Ω–Ω—è
- –†–æ–∑–º–æ–≤–ª—è—î—à —è–∫ –ø—Ä–∏—è—Ç–µ–ª—å, –Ω–µ —è–∫ –≤—á–∏—Ç–µ–ª—å

–í—ñ–¥–ø–æ–≤—ñ–¥–∞–π –∫–æ—Ä–æ—Ç–∫–æ (2-3 —Ä–µ—á–µ–Ω–Ω—è –º–∞–∫—Å–∏–º—É–º).
–ó–∞–ø–∏—Ç–∞–π —É—Ç–æ—á–Ω—é—é—á—ñ –ø–∏—Ç–∞–Ω–Ω—è –¥–ª—è –∫—Ä–∞—â–æ–≥–æ —Ä–æ–∑—É–º—ñ–Ω–Ω—è.
–ë—É–¥—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω–∏–º, –Ω–µ —Ç–µ–æ—Ä–µ—Ç–∏—á–Ω–∏–º.
–í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π –µ–º–æ–¥–∑—ñ –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω–æ."""
        
        self.help_keywords = {
            "–ø–∏—Ç–∞–Ω–Ω—è": ["—è–∫", "—â–æ", "—á–æ–º—É", "—è–∫—â–æ", "—á–∏", "–¥–µ"],
            "–ø—Ä–æ–±–ª–µ–º–∞": ["–Ω–µ –≤–¥–∞—î—Ç—å—Å—è", "–Ω–µ –º–æ–∂—É", "–∑–∞—Ç—Ä—É–¥–Ω–µ–Ω–Ω—è", "–∑–∞—Å—Ç—Ä—è–≥", "–ø—Ä–æ–±–ª–µ–º–∞"],
            "–∑–∞–ø–∏—Ç": ["–¥–æ–ø–æ–º–æ–∂–∏", "–ø–æ—Ä–∞–¥—å", "–ø—ñ–¥—Å–∫–∞–∂–∏"],
            "–º–µ—Ç–∞": ["—Ö–æ—á—É", "–º–µ—Ç–∞", "–ø–ª–∞–Ω", "–º—Ä—ñ—è"]
        }
    
    def is_coaching_request(self, text):
        text_lower = text.lower()
        if "#–∫–æ—É—á" in text:
            return True
        for keywords in self.help_keywords.values():
            if any(kw in text_lower for kw in keywords):
                return True
        return False
    
    def generate_groq_response(self, text, username):
        """–ì–µ–Ω–µ—Ä—É—î –≤—ñ–¥–ø–æ–≤—ñ–¥—å —á–µ—Ä–µ–∑ Groq AI"""
        try:
            prompt = f"""{self.coaching_prompt}

–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {username} –∑–∞–ø–∏—Ç—É—î: "{text}"

–î–∞–π –º—É–¥—Ä—É, —Ä–æ–∑–≥–æ—Ä–Ω—É—Ç—É –≤—ñ–¥–ø–æ–≤—ñ–¥—å —è–∫ –∫–æ—É—á."""
            
            message = client.chat.completions.create(
                model="mixtral-8x7b-32768",
                messages=[
                    {"role": "user", "content": prompt}
                ],
                max_tokens=500,
                temperature=0.7
            )
            
            return message.choices[0].message.content
        except Exception as e:
            logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ Groq: {e}")
            return f"{username}, –≤–∏–±–∞—á—Ç–µ, —Ç–µ—Ö–Ω—ñ—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑! ü§ñ"

coaching_bot = CoachingBot()

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    try:
        if update.message.from_user.is_bot:
            return
        
        text = update.message.text or ""
        username = update.message.from_user.first_name or "–î—Ä—É–∂–µ"
        chat_id = update.message.chat_id
        
        logger.info(f"üì® {username}: {text[:80]}")
        
        if chat_id != GROUP_CHAT_ID:
            return
        
        if coaching_bot.is_coaching_request(text):
            logger.info(f"üéØ –ö–æ—É—á–∏–Ω–≥ –∑–∞–ø–∏—Ç! –ó–∞–ø–∏—Ç—É—î–º–æ Groq...")
            
            # –ì–µ–Ω–µ—Ä—É—î–º–æ –≤—ñ–¥–ø–æ–≤—ñ–¥—å —á–µ—Ä–µ–∑ Groq
            response = coaching_bot.generate_groq_response(text, username)
            
            await update.message.reply_text(response, parse_mode=ParseMode.HTML)
            logger.info("‚úÖ Groq –≤—ñ–¥–ø–æ–≤—ñ–¥—å –Ω–∞–¥—ñ—Å–ª–∞–Ω–∞!")
        else:
            logger.info("‚è≠Ô∏è  –ù–µ –∫–æ—É—á–∏–Ω–≥")
    
    except Exception as e:
        logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞: {e}")

def main() -> None:
    logger.info("üöÄ –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ –∑ Groq AI...")
    application = Application.builder().token(BOT_TOKEN).build()
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
    logger.info("‚úÖ –ë–æ—Ç –≥–æ—Ç–æ–≤–∏–π!")
    application.run_polling(allowed_updates=Update.ALL_TYPES, drop_pending_updates=False)

if __name__ == '__main__':
    main()
